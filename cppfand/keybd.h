#pragma once
#include "constants.h"
#include "drivers.h"

// *** KEYBOARD ***
BYTE ofsHeadKeyBuf = 0x1A;
BYTE ofsTailKeyBuf = 0x1C; /*Bios*/
bool BreakFlag = false;
BYTE diHacek = 1; const BYTE diCarka = 2; const BYTE diUmlaut = 3;
char Diak = 0; /*diHacek, diCarka*/

BYTE TabKtl[256] = {  /* Kamenicky to Latin2 */
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0xac,0x81,0x82,0xd4,0x84,0xd2,0x9b,0x9f,0xd8,0xb7,0x91,0xd6,0x96,0x92,0x8e,0xb5,
	0x90,0xa7,0xa6,0x93,0x94,0xe0,0x85,0xe9,0xec,0x99,0x9a,0xe6,0x95,0xed,0xfc,0x9c,
	0xa0,0xa1,0xa2,0xa3,0xe5,0xd5,0xde,0xe2,0xe7,0xfd,0xea,0xe8,0x9e,0xf5,0xae,0xaf,
	0xb0,0xb1,0xb2,0xb3,0xb4,0x8b,0xba,0xfb,0xeb,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
	0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xba,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
	0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
	0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
	0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff };

BYTE TabLtK[256] = {  /*Latin2 to Kamenicky */
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0x80,0x81,0x82,0x83,0x84,0x96,0x86,0x87,0x88,0x89,0xb6,0xb5,0x8c,0x8d,0x8e,0x8f,
	0x90,0x8a,0x8d,0x93,0x94,0x9c,0x8c,0x97,0x98,0x99,0x9a,0x86,0x9f,0x9d,0x9e,0x87,
	0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0x92,0x91,0xa8,0xa9,0xa0,0xab,0x80,0xad,0xae,0xaf,
	0xb0,0xb1,0xb2,0xb3,0xb4,0x8f,0xb6,0x89,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
	0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
	0xd0,0xd1,0x85,0xd3,0x83,0xa5,0x8b,0xd7,0x88,0xd9,0xda,0xdb,0xdc,0xdd,0xa6,0xdf,
	0x95,0xe1,0xa7,0xe3,0xe4,0xa4,0x9b,0xa8,0xab,0x97,0xaa,0x55,0x98,0x9d,0xee,0xef,
	0xf0,0xf1,0xf2,0xf3,0xf4,0xad,0xf6,0xf7,0xf8,0xf9,0xfa,0x75,0x9e,0xa9,0xfe,0xff };

BYTE TabKtN[256] = {  /* Kamenicky to NoDiakr */
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0x43,0x75,0x65,0x64,0x61,0x44,0x54,0x63,0x65,0x45,0x4c,0x49,0x6c,0x6c,0x41,0x41,
	0x45,0x7a,0x5a,0x6f,0x6f,0x4f,0x75,0x55,0x79,0x99,0x9a,0x53,0x4c,0x59,0x52,0x74,
	0x61,0x69,0x6f,0x75,0x6e,0x4e,0x55,0x4f,0x73,0x72,0x72,0x52,0xac,0xad,0xae,0xaf,
	0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,
	0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
	0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,
	0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,
	0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff };

BYTE TabLtN[256] = {  /* Latin2 to NoDiakr */
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0x43,0x75,0x65,0x61,0x61,0x75,0x63,0x63,0x6c,0x65,0x4f,0x6f,0x69,0x5a,0x41,0x43,
	0x45,0x4c,0x6c,0x6f,0x6f,0x4c,0x6c,0x53,0x73,0x4f,0x55,0x54,0x74,0x4c,0x9e,0x63,
	0x61,0x69,0x6f,0x75,0x41,0x61,0x5a,0x7a,0x45,0x65,0x61,0x7a,0x43,0x73,0xae,0xaf,
	0xb0,0xb1,0xb2,0xb3,0xb4,0x41,0x41,0x45,0x53,0xb9,0xba,0xbb,0xbc,0x5a,0x7a,0xbf,
	0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0x41,0x61,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,
	0x64,0x44,0x44,0x45,0x64,0x4e,0x49,0x49,0x65,0xd9,0xda,0xdb,0xdc,0x54,0x55,0xdf,
	0x4f,0xe1,0x4f,0x4e,0x6e,0x6e,0x53,0x73,0x52,0x55,0x72,0x55,0x79,0x59,0x74,0xef,
	0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0x75,0x52,0x72,0xfe,0xff };

const BYTE CsKbdSize = 67;

void BreakIntHandler(); // ASM
void BreakIntrInit(); // vektory
void BreakIntrDone(); // vektory

void BreakCheck();
unsigned char CurrToKamen(unsigned char C); // ASM
BYTE ConvKamenToCurr(unsigned char* Buf, WORD L); // ASM
void ConvKamenLatin(unsigned char* Buf, WORD L, bool ToLatin); // ASM
unsigned char ToggleCS(unsigned char C); // ASM
unsigned char NoDiakr(unsigned char C); // ASM
void ConvToNoDiakr(unsigned char* Buf, WORD L, TVideoFont FromFont); // ASM
void ClearKeyBuf(); // ASM
void AddToKbdBuf(WORD KeyCode); // ASM
bool KeyPressed(); // ASM
WORD ReadKey(); // ASM
WORD ConvHCU(); // ASM
void GetKeyEvent(); // ASM
bool KbdTimer(WORD Delta, BYTE Kind); // r286

// *** MOUSE ***
void ShowMouse();
void HideMouse();
void ResetMouse();
const BYTE Acht = 8;
void MouseEvHandler();
void InitMouseEvents(); // ASM
void SetMouse(WORD X, WORD Y, bool Visible);
void DoneMouseEvents();
void HideMaus();
void ShowMaus();

pstring RedKeyName(8);

void GetRedKeyName();
void GetMouseEvent();
void GetMouseKeyEvent();
void TestGlobalKey();
WORD AddCtrlAltShift(BYTE Flgs/*04=Ctrl,08=Alt,03=Shift*/);
bool TestEvent();

#ifdef Trial
longint getSec();
void TestTrial();
#endif
